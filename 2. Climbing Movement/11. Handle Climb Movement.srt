WEBVTT

00:00:00.000 --> 00:00:09.720
Welcome, in the last lecture, we set up a way for us to process the climbable surfaces
欢迎，在上一讲中，我们设置了一个方法，让我们处理可攀登的表面

00:00:09.720 --> 00:00:10.720
info.
信息。

00:00:10.720 --> 00:00:15.920
And now we have the information of the location and the normal and we are also taking multiple
现在我们有了位置和法线的信息，而且我们还将多个

00:00:15.920 --> 00:00:17.880
surfaces into account.
面纳入考虑。

00:00:17.880 --> 00:00:23.320
And in this lecture, we will look at how we can actually handle the movement of our climbing.
在这一讲中，我们将研究如何实际处理我们的爬升运动。

00:00:23.320 --> 00:00:28.560
More specifically, we need to handle the velocity, the rotation, and snapping movement to the
更具体地说，我们需要处理速度、旋转和与表面的捕捉运动。

00:00:28.560 --> 00:00:29.560
surface.
表面。

00:00:29.560 --> 00:00:31.480
Alright, let's start coding.
好了，让我们开始编码吧。

00:00:31.480 --> 00:00:33.680
So I'm going to first close my project.
所以我将首先关闭我的项目。

00:00:33.680 --> 00:00:38.720
The first thing that I want to do, I'm going to go to the header file, then scroll up.
我想做的第一件事是，我将进入头文件，然后向上滚动。

00:00:38.720 --> 00:00:42.640
I'm going to go to this new character movement component.
我将转到这个新的角色运动组件。

00:00:42.640 --> 00:00:46.040
And inside of it, there are two functions that we need to override.
在它里面，有两个我们需要覆盖的函数。

00:00:46.040 --> 00:00:50.760
So press Ctrl + F, I'm going to search get max speed.
所以按Ctrl + F，我将搜索获得最大速度。

00:00:50.760 --> 00:00:54.960
So this is the first function that we need to override so that we can change our climb
所以这是我们需要覆盖的第一个函数，这样我们就可以改变我们的爬升

00:00:54.960 --> 00:00:55.960
speed.
速度。

00:00:55.960 --> 00:00:59.000
So I'm going to copy this function and go back to the header file.
所以我要复制这个函数并回到头文件中。

00:00:59.000 --> 00:01:04.920
I'm going to paste the function inside of this overridden functions.
我将把这个函数粘贴到这个重载函数里面。

00:01:04.920 --> 00:01:06.380
And there's another function.
还有一个函数。

00:01:06.380 --> 00:01:11.240
So here I'm going to search for get max acceleration.
所以在这里我将搜索获取最大加速度。

00:01:11.240 --> 00:01:16.160
So I'm going to copy this, then I'm going to paste it in my header file.
所以我要复制这个，然后把它粘贴到我的头文件中。

00:01:16.160 --> 00:01:18.960
So these are the two functions that we need to override.
所以这就是我们需要覆盖的两个函数。

00:01:18.960 --> 00:01:20.800
I'm going to mark this one override.
我要把这一个标记为覆盖。

00:01:20.800 --> 00:01:25.660
Alright, I'm going to create two function definitions.
好的，我将创建两个函数定义。

00:01:25.660 --> 00:01:31.100
So place this get max speed under this fixix custom.
所以把这个get max speed放在这个fixix custom下面。

00:01:31.100 --> 00:01:33.640
So place it in here.
所以把它放在这里。

00:01:33.640 --> 00:01:37.360
Then another function.
然后是另一个函数。

00:01:37.360 --> 00:01:40.360
And what we need to do inside of these two functions is simple.
在这两个函数中，我们需要做的事情很简单。

00:01:40.360 --> 00:01:46.000
So I'm going to check if it's climbing is true.
所以我将检查它的爬升是否为真。

00:01:46.000 --> 00:01:50.620
If that's the case, I'm going to return the max climb speed in here.
如果是这样的话，我将在这里返回最大的爬升速度。

00:01:50.620 --> 00:01:57.000
And if it's false, then I'm going to return the super version of this function.
如果是假的，那么我将返回这个函数的超级版本。

00:01:57.000 --> 00:02:01.480
So type in super and copy this get max speed paste it in here.
所以输入super，然后复制这个get max speed粘贴到这里。

00:02:01.480 --> 00:02:06.160
And for this max climb speed, I'm going to create another member variable for it and
对于这个最大爬升速度，我将为它创建另一个成员变量，并且

00:02:06.160 --> 00:02:08.320
I'm going to expose it to blueprint.
我将把它暴露给蓝图。

00:02:08.320 --> 00:02:13.780
So scroll down inside of this climb BP variables, I'm going to create a new float.
因此，在这个攀登BP变量里面向下滚动，我将创建一个新的浮点。

00:02:13.780 --> 00:02:18.560
So copy this line and paste it in here.
所以复制这一行并把它粘贴到这里。

00:02:18.560 --> 00:02:24.480
So it's going to be another flow, I'm going to call this max climb speed and give it a
所以这将是另一个流量，我将把它称为最大爬升速度，并给它一个

00:02:24.480 --> 00:02:26.860
default value of 100 units.
默认值为100单位。

00:02:26.860 --> 00:02:28.720
Then go back to my CPB file.
然后回到我的CPB文件。

00:02:28.720 --> 00:02:32.720
Inside of this is climbing, I'm going to return this max climb speed.
在这里面是爬升，我将返回这个最大爬升速度。

00:02:32.720 --> 00:02:36.020
Alright, that's the function body of this one.
好了，这就是这个函数的主体。

00:02:36.020 --> 00:02:41.360
Then I'm going to copy these lines and I'm going to paste them in this function.
然后我将复制这些行，并将它们粘贴到这个函数中。

00:02:41.360 --> 00:02:46.480
So what we need to do inside of this function is in here, I'm going to return max climb
所以我们需要在这个函数中做的是，在这里，我将返回最大爬升

00:02:46.480 --> 00:02:47.680
acceleration.
加速。

00:02:47.680 --> 00:02:51.360
And for that, I'm going to create a new member variable.
为此，我将创建一个新的成员变量。

00:02:51.360 --> 00:02:58.760
So copy this one and paste it in here and change this speed to acceleration and give
所以复制这个变量并把它粘贴到这里，把速度改为加速度，并给它一个默认值300单位。

00:02:58.760 --> 00:03:03.920
it a default value of 300 units and copy this variable.
它的默认值是300单位，然后复制这个变量。

00:03:03.920 --> 00:03:07.460
Come back to my CPB file, paste it in here.
回到我的CPB文件，把它粘贴在这里。

00:03:07.460 --> 00:03:12.480
And if it's climbing is false, I'm going to return the super version of this function.
如果它的爬升是假的，我将返回这个函数的超级版本。

00:03:12.480 --> 00:03:14.240
So paste it in here.
所以把它粘贴在这里。

00:03:14.240 --> 00:03:15.360
And that's it.
就这样了。

00:03:15.360 --> 00:03:16.720
That's the climb speed done.
这就是爬升速度了。

00:03:16.720 --> 00:03:21.000
Alright, I'm going to try to compile first to see if there are any errors.
好了，我先试着编译一下，看看是否有什么错误。

00:03:21.000 --> 00:03:27.480
Alright, I have a successful compile and I'm going to scroll down to my fixix climb function.
好的，我的编译成功了，我将向下滚动到我的fixix爬升函数。

00:03:27.480 --> 00:03:31.120
That's all for this max climb speed and this acceleration.
这就是这个最大爬升速度和这个加速度的全部内容。

00:03:31.120 --> 00:03:34.040
And next one, I like to handle this rotation.
下一个，我喜欢处理这个旋转。

00:03:34.040 --> 00:03:37.220
And for that, I'm going to create a new function for it.
为此，我将为它创建一个新的函数。

00:03:37.220 --> 00:03:43.080
So go back to my header file, scroll up to this climb core, and I'm going to create another
所以回到我的头文件，向上滚动到这个爬升核心，我将创建另一个

00:03:43.080 --> 00:03:44.080
function.
函数。

00:03:44.080 --> 00:03:47.640
It needs to return an F clock.
它需要返回一个F时钟。

00:03:47.640 --> 00:03:50.960
And I'm going to call it get climb rotation.
我将把它叫做 "获取攀登旋转"。

00:03:50.960 --> 00:03:52.760
It's going to have one input parameter.
它将会有一个输入参数。

00:03:52.760 --> 00:03:54.440
I'm going to call this one delta time.
我将把这个称为delta时间。

00:03:54.440 --> 00:03:59.440
Later, we'll need to use this delta time to help us to interpolate our current quaternion
稍后，我们将需要使用这个delta time来帮助我们把当前的四元数插值到

00:03:59.440 --> 00:04:01.240
to the target quaternion.
到目标四元数。

00:04:01.240 --> 00:04:06.480
So I'm going to create a function definition and I'm going to place the function under
所以我将创建一个函数定义，并将该函数置于

00:04:06.480 --> 00:04:09.800
this process climbable surface info.
这个过程中的可爬升表面信息。

00:04:09.800 --> 00:04:10.800
So paste it in here.
所以把它粘贴在这里。

00:04:10.800 --> 00:04:13.240
And now we don't need to see these two debug lines.
现在我们不需要看到这两条调试线了。

00:04:13.240 --> 00:04:18.400
I'm going to delete them.
我将删除它们。

00:04:18.400 --> 00:04:22.320
So instead of this function, first I'm going to create a local variable.
所以，首先我要创建一个本地变量，而不是这个函数。

00:04:22.320 --> 00:04:24.400
It's going to be an Fquat.
它将会是一个Fquat。

00:04:24.400 --> 00:04:31.040
I'm going to call it currentquat and it's going to equal to our updated component.
我将把它称为currentquat，它将等于我们更新的组件。

00:04:31.040 --> 00:04:32.040
Componentquat.
元件quat。

00:04:32.040 --> 00:04:35.120
All right, this is the current rotation of our character.
好了，这就是我们的角色的当前旋转。

00:04:35.120 --> 00:04:37.340
And next thing I'm going to do an if check.
接下来我将做一个if检查。

00:04:37.340 --> 00:04:41.760
So if we have an root motion.
所以，如果我们有一个根动作。

00:04:41.760 --> 00:04:48.360
So if we want to use the root motion to drive the movement of our character or the current
所以，如果我们想用根运动来驱动我们的角色的运动，或者当前的

00:04:48.360 --> 00:04:51.720
root motion has over written velocity.
根部运动已经超过了速度。

00:04:51.720 --> 00:04:57.440
Either way, I'm going to return this currentquat.
无论怎样，我都要返回这个当前的quat。

00:04:57.440 --> 00:05:02.440
Once we get past this if check, that means we do want to control the rotation ourselves.
一旦我们通过了这个if检查，这就意味着我们确实想自己控制旋转。

00:05:02.440 --> 00:05:06.520
And in this case, I'm going to calculate the target quaternion in here.
在这种情况下，我将在这里计算出目标四元数。

00:05:06.520 --> 00:05:09.920
So it's going to be another const Fquat.
所以它将是另一个常数Fquat。

00:05:09.920 --> 00:05:14.520
I'm going to call it targetquat and I'm going to make a rotation first.
我将把它称为目标四元数，然后我将首先进行旋转。

00:05:14.520 --> 00:05:18.600
So it's going to be a rotation matrix double colon.
所以它将会是一个旋转矩阵的双冒号。

00:05:18.600 --> 00:05:22.980
I'm going to use the function makeFromX.
我将使用函数makeFromX。

00:05:22.980 --> 00:05:28.160
So I'm going to use a vector to make a rotation so that our character can always face the
所以我要用一个矢量来做一个旋转，这样我们的角色就可以一直面对着

00:05:28.160 --> 00:05:29.620
climbable surface.
可攀爬的表面。

00:05:29.620 --> 00:05:35.860
And this vector here, this can simply be the current climbable surface normal.
而这个向量，可以简单地作为当前可攀爬表面的法线。

00:05:35.860 --> 00:05:40.320
And in case you forget, the surface normal is simply a line pointing straight out from
如果你忘记了，表面法线就是一条从脸部向外直射的线。

00:05:40.320 --> 00:05:41.320
the face.
面的直线。

00:05:41.320 --> 00:05:43.480
But here we want the opposite.
但这里我们要的是相反的。

00:05:43.480 --> 00:05:46.600
We want the vector to point to the climbable surface.
我们想让这个向量指向可爬升表面。

00:05:46.600 --> 00:05:50.560
So in here we need to inverse this surface normal.
所以在这里我们需要反转这个表面法线。

00:05:50.560 --> 00:05:56.440
All right, now we have a rotator and I'm going to convert this to a quaternion.
好了，现在我们有一个旋转器，我要把它转换成四元数。

00:05:56.440 --> 00:06:00.000
So we can simply use the function toquat.
所以我们可以简单地使用函数toquat。

00:06:00.000 --> 00:06:02.000
And this is our target rotation.
这就是我们的目标旋转。

00:06:02.000 --> 00:06:03.040
All right.
好的。

00:06:03.040 --> 00:06:09.240
And the last thing I'm going to do an interpolation so that we won't have any jittering movement.
最后，我要做一个插值，这样我们就不会有任何抖动的运动。

00:06:09.240 --> 00:06:11.400
So it's going to be an F math.
所以这将是一个F数学。

00:06:11.400 --> 00:06:16.900
And to interpolate quaternion, there is a function is called qinterp2.
为了对四元数进行插值，有一个函数叫做qinterp2。

00:06:16.900 --> 00:06:18.560
And here we need to fill in the current.
在这里我们需要填入电流。

00:06:18.560 --> 00:06:25.960
Well, this will be our current quaternion and the target will be our target quaternion.
那么，这将是我们当前的四元数，目标将是我们的目标四元数。

00:06:25.960 --> 00:06:33.360
And fill in the function input delta time and the interspeed.
并填入函数输入的delta时间和interspeed。

00:06:33.360 --> 00:06:36.120
Here I'm going to give it a heart quality value of 5.f.
在这里，我将给它一个心脏质量值为5.f。

00:06:36.120 --> 00:06:37.960
I think this is more than enough.
我认为这已经足够了。

00:06:37.960 --> 00:06:42.640
And then I simply need to return the result of this F math.
然后我只需要返回这个F数学的结果。

00:06:42.640 --> 00:06:44.680
I'm going to delete this one.
我要删除这个。

00:06:44.680 --> 00:06:46.360
All right, that's the rotation done.
好了，这就是旋转完成了。

00:06:46.360 --> 00:06:53.080
I'm going to copy this function and scroll up to this safe move updated component.
我要复制这个函数，然后向上滚动到这个安全移动更新组件。

00:06:53.080 --> 00:06:58.440
I'm going to paste the function in here, then fill in the function input delta time.
我要把这个函数粘贴在这里，然后填入函数的输入delta时间。

00:06:58.440 --> 00:07:01.600
So copy this and paste it in here.
所以复制这个并把它粘贴在这里。

00:07:01.600 --> 00:07:04.080
All right, that's the rotation done.
好了，这就是旋转完成了。

00:07:04.080 --> 00:07:08.360
And the last thing that we need to handle, so we need to snap the movement to climbable
我们需要处理的最后一件事是，我们需要将运动锁定在可攀登的

00:07:08.360 --> 00:07:09.360
surfaces.
表面。

00:07:09.360 --> 00:07:12.000
For that, I'm going to create a new function.
为此，我将创建一个新的函数。

00:07:12.000 --> 00:07:13.440
So go back to my header file.
所以请回到我的头文件中。

00:07:13.440 --> 00:07:14.960
It's going to be void.
它将是无效的。

00:07:14.960 --> 00:07:21.560
I'm going to call it snap movement to climbable surfaces.
我将把它叫做 "将运动与可攀爬表面相扣"。

00:07:21.560 --> 00:07:26.320
And it's going to have the same function input delta time.
它将会有同样的函数输入delta时间。

00:07:26.320 --> 00:07:30.400
And I'm going to create a function definition.
我将创建一个函数定义。

00:07:30.400 --> 00:07:34.040
Place the function under this get climbing rotation.
把这个函数放在这个获得爬升的旋转下面。

00:07:34.040 --> 00:07:40.760
So the first thing I'm going to create a const of vector.
所以我首先要创建一个矢量的常量。

00:07:40.760 --> 00:07:43.320
I'm going to call this one component forward.
我将把这个称为一个分量向前。

00:07:43.320 --> 00:07:47.040
So this is going to be our components forward vector.
所以这将是我们的分量向前矢量。

00:07:47.040 --> 00:07:52.200
And use the function get forward vector.
然后使用函数get forward vector。

00:07:52.200 --> 00:07:57.320
All right, next vector that we need to get, it's going to be another const of vector.
好的，下一个我们需要得到的向量，它将是另一个向量的常数。

00:07:57.320 --> 00:08:01.480
I'm going to call this one component location.
我将把这个称为一个组件的位置。

00:08:01.480 --> 00:08:05.880
And it's going to equal to this updated component.
它将等同于这个更新的组件。

00:08:05.880 --> 00:08:09.280
Get component location.
获取分量位置。

00:08:09.280 --> 00:08:15.580
And then with these two pieces of information, I'm going to create another const of vector.
然后用这两个信息，我将创建另一个向量的常量。

00:08:15.580 --> 00:08:21.360
So this one I'm going to call it projected character to surface.
所以这个我将把它称为投影字符到表面。

00:08:21.360 --> 00:08:27.400
So here I'm going to first use the current climbable surface location to subtract the
所以在这里我将首先使用当前可爬升的表面位置来减去

00:08:27.400 --> 00:08:29.600
component location.
组件的位置。

00:08:29.600 --> 00:08:34.200
So here we can get a vector that's pointing from our character to the surface.
所以在这里我们可以得到一个从我们的角色指向表面的向量。

00:08:34.200 --> 00:08:36.440
I'm going to start on a new line here.
我将在这里开始一个新的线条。

00:08:36.440 --> 00:08:44.500
Then I'm going to project this vector onto this component forward.
然后我将把这个矢量向前投射到这个组件上。

00:08:44.500 --> 00:08:50.440
And now the size of this vector is the exact distance for us to snap our character to the
现在这个向量的大小是我们将角色扣在表面的准确距离。

00:08:50.440 --> 00:08:51.440
surface.
表面。

00:08:51.440 --> 00:08:55.160
And I'm going to create another const of vector.
我将创建另一个矢量的结构。

00:08:55.160 --> 00:08:58.760
I'm going to call this one snap vector.
我将把这个向量称为 "捕捉向量"。

00:08:58.760 --> 00:09:04.120
So this vector here, I'm going to first get hold of our current climbable surface normal.
所以这个向量在这里，我将首先掌握我们当前可爬升表面的法线。

00:09:04.120 --> 00:09:06.240
And I'm going to inverse this normal.
然后我将反转这个法线。

00:09:06.240 --> 00:09:08.160
So this will be the direction.
所以这将是一个方向。

00:09:08.160 --> 00:09:15.720
And I'm going to multiply this direction with the length of this vector.
我将把这个方向与这个向量的长度相乘。

00:09:15.720 --> 00:09:18.240
So use the function length in here.
所以用这里的函数长度。

00:09:18.240 --> 00:09:23.360
And this is the vector that we can use to snap our character to the surface.
这就是我们可以用来把我们的角色固定在表面的向量。

00:09:23.360 --> 00:09:28.140
All right, with all of this information ready, I'm going to use the function inside the updated
好了，所有这些信息都准备好了，我将在更新的组件中使用这个函数。

00:09:28.140 --> 00:09:30.240
component.
组件。

00:09:30.240 --> 00:09:32.960
And the function is called move component.
这个函数叫做移动组件。

00:09:32.960 --> 00:09:35.320
In here we need to fill in the delta.
在这里我们需要填入delta。

00:09:35.320 --> 00:09:42.620
The delta will be the snap vector, multiply this delta time and multiply our max climb
这个delta将是一个快门矢量，乘以这个delta时间，再乘以我们的最大爬升

00:09:42.620 --> 00:09:43.620
speed.
速度。

00:09:43.620 --> 00:09:48.320
And the next input parameter that we need to fill in is this new rotation.
下一个我们需要填写的输入参数是这个新的旋转。

00:09:48.320 --> 00:09:49.880
And it's an Fquart.
它是一个Fquart。

00:09:49.880 --> 00:09:53.680
And we can easily get that by using this updated component again.
我们可以很容易地通过使用这个更新的组件来获得这个参数。

00:09:53.680 --> 00:09:56.360
So I'm going to start on the new line.
所以我将在新的一行开始。

00:09:56.360 --> 00:10:01.920
And I'm going to copy this and use the function get componentquart.
我将复制这个并使用函数get componentquart。

00:10:01.920 --> 00:10:04.800
And the third input parameter is B sweep.
第三个输入参数是B扫频。

00:10:04.800 --> 00:10:06.480
I'm going to fill in true.
我要填入true。

00:10:06.480 --> 00:10:10.600
So by doing this, we'll be detecting any possible collision along the way.
因此，通过这样做，我们将检测到沿途任何可能的碰撞。

00:10:10.600 --> 00:10:13.740
All right, that's pretty much it for this function.
好了，这个函数差不多就这样了。

00:10:13.740 --> 00:10:15.360
Then I'm going to call this function.
然后我将调用这个函数。

00:10:15.360 --> 00:10:20.640
So copy it and paste it in here.
所以复制它并把它粘贴在这里。

00:10:20.640 --> 00:10:22.860
And fill in this delta time.
然后填入这个delta时间。

00:10:22.860 --> 00:10:24.880
So copy this and paste it in here.
所以复制这个并粘贴到这里。

00:10:24.880 --> 00:10:27.560
All right, that's pretty much all we need to do for the movement.
好了，这就是我们需要做的运动的大部分内容。

00:10:27.560 --> 00:10:29.120
I'm going to try to compile again.
我将尝试再次编译。

00:10:29.120 --> 00:10:30.880
I have a successful compile.
我有一个成功的编译。

00:10:30.880 --> 00:10:32.440
I'm going to launch my editor back.
我将启动我的编辑器回来。

00:10:32.440 --> 00:10:34.040
All right, go back to my editor.
好的，回到我的编辑器中去。

00:10:34.040 --> 00:10:36.080
I'm going to press play in here.
我将在这里按播放。

00:10:36.080 --> 00:10:42.120
Then go to the surface, press F. And now you can see we can move along the surface using
现在你可以看到我们可以用以下方法沿着表面移动

00:10:42.120 --> 00:10:46.000
the mass climb speed that we just created.
我们刚刚创建的质量爬升速度。

00:10:46.000 --> 00:10:48.640
Note that now we can only move left or right.
注意，现在我们只能向左或向右移动。

00:10:48.640 --> 00:10:51.440
We cannot move up or down.
我们不能向上或向下移动。

00:10:51.440 --> 00:10:55.040
And that's because there's another thing that we need to take care of.
这是因为还有一件事需要我们去处理。

00:10:55.040 --> 00:10:57.480
We should handle the movement input differently.
我们应该以不同的方式处理运动输入。

00:10:57.480 --> 00:11:02.580
So the default movement code is only suitable for moving the character on the ground.
所以默认的移动代码只适合于在地面上移动角色。

00:11:02.580 --> 00:11:07.040
And if we like to move the character on the surface, we'll need to do a little bit of
如果我们想让角色在地面上移动，我们需要做一点儿

00:11:07.040 --> 00:11:08.720
math in there.
数学。

00:11:08.720 --> 00:11:12.280
And we'll look at how we can do that in the next lecture.
我们将在下一讲中研究如何做到这一点。

00:11:12.280 --> 00:11:16.920
So in this lecture, we've taken care of the velocity rotation and snapping.
所以在这节课中，我们已经处理了速度旋转和捕捉的问题。

00:11:16.920 --> 00:11:19.820
Feel free to refer back to the video if you need help.
如果你需要帮助，可以随时回看视频。

00:11:19.820 --> 00:11:21.200
And I'll see you in the next lecture.
我们在下一讲中再见。

00:11:21.700 --> 00:11:24.260
[MUSIC PLAYING]
[音乐响起]

00:11:24.260 --> 00:11:27.320
[MUSIC PLAYING]
[音乐播放] [音乐播放]

00:11:27.320 --> 00:11:30.660
[MUSIC PLAYING]
[音乐播放] [音乐播放]
